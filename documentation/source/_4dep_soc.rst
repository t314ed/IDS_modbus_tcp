.. _4dep_soc:

===============================
Inférences des modèles sur SoC
===============================

Description
===========

Cette section traite de l'inférence des modèles sur les systèmes sur puce (SoC).
Nous avons vu deux méthodes d'inférence :
- Edge Impulse
- Emlearn

Nous allons voir ici comment nous pouvons réaliser l'inférence. 
La carte qu'on utilisera sera une Nordic nRF5340 DK.


La carte Nordic nRF5340 DK :

- Processeur ARM Cortex-M33, 128/64 MHz
- 1 MB flash  
- 512 KB RAM

D'autres informations sont disponible dans la documentation.


.. note::

    Documentation de la carte : https://www.nordicsemi.com/Products/Development-hardware/nRF5340-DK
    Nous avons ici la documentation de zephyr : https://docs.zephyrproject.org/latest/index.html


Pré-requis
===========
 
Vs-code :
-----------


Pour pouvoir flasher sur la carte, nous devons installer les outils.
Pour cela nous aurons besoin de `Vs code`.

Voici le lien pour l'installation : https://www.nordicsemi.com/Products/Development-tools/nRF-Connect-for-VS-Code

Des vidéos sont disponibles pour l'installation, ainsi qu'une prise en main.


nRF SDK:
----------

Après avoir fini ces installations, on pourra effectuer quelques étapes pour
utiliser correctement Emlearn avec notre carte.

- Allez dans votre répertoir de SDK et éditez le fichier : ``../nsc/_version_/nrf/west.yml``.

- Ajoutez ces lignes dans la section ``Other third-party repositories`` :

.. code-block:: yaml
    
    - name : emlearn
        url : https://github.com/emlearn/emlearn
        revision : master

Il faudra en suite dans le dossier d'application mettre cette commande 
dans le ``CMakeLists.txt`` :

.. code-block:: shell

    include_directories (/home/toto_user/ncs/_version_/emlearn/emlearn)


.. note::

    Ces étapes sont décrits dans la documentation de Emlearn : 

        https://emlearn.readthedocs.io/en/latest/getting_started_zephyr.html#add-emlearn-to-your-zephyr-project


Inférence Emlearn
========================

Dans la librairie C, qu'on a obtenu précédemment, on trouvera la fonction : ``votre_model_predict()``.
En argument cette fonction prendra un vecteur qui contiendra les features et
la taille de ce vecteur. 

On aura en sortie le label qu'on a nommé bien avant : ``0 ou 1``.

Nous avons ici un code exemple pour réaliser une prédiction :

.. code-block:: c 


    #include <zephyr/kernel.h>
    #include "mlp_modbus.h"

    static const int32_t features_length=46;
    static float features[2][46]= {{2.426416, 500.511900, 2.000000, 2.000000, 1.000000, 260.766500, 8.329146, 336.580400, 2.445904, 1.000000, 1.000000, 1.000000, 2.000000, 19.822010, 2.212856, 847.619200, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.808000, 179.441200, 1.697626, 911.958500, 1.000000, 2.000000, 1.000000, 1.000000, 7.854909, 173.468300, 260.542200, 10.766470, 1.703538, 1.257974, 0.743335, 0.310604, 1.000000, 255.527400, 1.537821, 194.309200, 0.000128, 1.000000, 1.000000, 1.000000},
    {2.612497, 501.768000, 2.000000, 2.000000, 1.000000, 176.108700, 8.631634, 301.768800, 2.460257, 1.000000, 1.000000, 1.000000, 2.000000, 20.174150, 2.198636, 852.265400, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.803200, 144.116900, 1.722872, 900.576800, 1.000000, 2.000000, 1.000000, 1.000000, 7.798513, 137.554500, 269.706500, 16.188160, 1.730197, 1.294607, 0.732580, 0.306569, 1.000000, 248.942600, 1.025214, 187.339800, 0.000000, 1.000000, 1.000000, 1.000000}
    };
    const float labels [2]= {0.0, 0.0};
    float preds;    

    int main()
    {
        
        preds = mlp_modbus_predict(features[0],features_length);
        printf("Prediction 1 : %f\n , label 1 : %f", preds, labels[0]);
        
        return 0;
    };

Il suffira en suite d'effectuer un build et de flash la carte.



Inférence Edge Impulse : ML Studio
===================================

On obtient le fichier suivant pour la conversion avec Edge Impulse.

.. code-block:: shell

    ids-v3\_mlstudio
          ├── edge-impulse-sdk
          ├── model-parameters
          ├── tflite-model
          ├── CMakeLists.txt
          └── README.txt

On pourra nous créer fichier ``src/main.cpp``

Le code pour l'inférence sera vu dans la section suivante. 

Une fois que vous avez le code source, vous ne pouvez pas directement
effectuer un build. 

Une solution est de faire le build en ligne de commande : 

.. code-block:: shell

    west build -b nrf5340dk_nrf5340_cpuapp


Vous retrouvez plus d'informations dans cette section de la documentation :
https://docs.edgeimpulse.com/nordic/run-inference/cpp-library/running-your-impulse-locally-zephyr

Une autre solution d'est d'instancier le dossier de travail comme un workspace qu'on pourra utiliser 
avec l'outil ``nRF Connect``: 

    - Aller dans le dossier où se trouve trouve tous nos fichiers : ``_mlstudio`` (dans notre cas).
    - Exécuter la commande : ``west init``

Vous pourrez en suite effectuer les build et le flash en utilisant l'outil.

Analyse de temps d'execution 
===============================

Pour mesurer la durée d'exécution d'une prédiction, on éxectuera des
prise de temps au début et à la fin des prédictions.
On a le code exmeple suivant pour pouvoir mesurer le temps d'exécution
d'une prédiction :

.. code-block:: cpp 

    #include <zephyr/kernel.h>

    int main()
    {
        float  start,endt;
        start= k_uptime_ticks();   //start time

        // code de prediction
        // ... 
        endt= k_uptime_ticks(); //end time
        printk("Time for one prediction : %lld ticks\n", endt-start); //temps pris en tick d'horloge
        printk("Time for one prediction : %lld us\n", k_ticks_to_us_floor64((endt-start))); // temps pris en microsecondes
        return 0;
    }



Consommation d'énergie
=========================

Pour effectuer des analyse sur la consommation d'énergie, nous utilisons
l'outil : **Nordic Power Profiler Kit II**.

.. note::

    On peut retrouver la documentation avec ce lien : https://www.nordicsemi.com/Products/Development-hardware/Power-Profiler-Kit-2

Cet appareil sera utilisable avec l'outil : ``nrf Connect for Desktop``. (https://www.nordicsemi.com/Products/Development-tools/nRF-Connect-for-Desktop) 

Les principales caractérisques de cet appariel de mesure sont les suivantes : 

- Ampèremètre
- Plage de mesure du courant : 500 nA - 1 A 
- Fréquence d'échantillonage : 100 ksps (kilosample(s) per seconde)

Mesure de courant sur l'inférence
-----------------------------------

Pour effectuer la mesure de courant, nous allons arranger le code de façon
à effectuer un nombre de prédiction important. Ce nombre peut être 
adapté pour les besoins de l'utilisateur.



Nous devons sectionner un élémént sur la carte pour effectuer la mesure de courant : 
https://docs.nordicsemi.com/bundle/ug_nrf5340_dk/page/UG/dk/prepare_board.html

.. figure:: /_static/images/sectionner.jpeg

    Sectionner ``SB40``

Pour le branchement de l'outil à la carte, on a l'image suivante :

.. figure:: /_static/images/branchement.png
    
    Branchement pour la mesure de courant

.. note:: 

    Source : https://docs.nordicsemi.com/bundle/ug_ppk2/page/UG/ppk/PPK_user_guide_Quick_start.html





Emlearn 
---------

Dans ce code, on fera assez de prédiction pour nous faire une idée de grandeur sur la consommation d'énergie.
Nous verrons aussi le temps pris moyen pris pour faire 200 prédictions.

.. code-block:: c   

    #include <zephyr/kernel.h>
    #include "mlp_modbus.h"
    

    static const int32_t features_length=46;

    static float features[20][46] = {
    {2.426416, 500.511900, 2.000000, 2.000000, 1.000000, 260.766500, 8.329146, 336.580400, 2.445904, 1.000000, 1.000000, 1.000000, 2.000000, 19.822010, 2.212856, 847.619200, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.808000, 179.441200, 1.697626, 911.958500, 1.000000, 2.000000, 1.000000, 1.000000, 7.854909, 173.468300, 260.542200, 10.766470, 1.703538, 1.257974, 0.743335, 0.310604, 1.000000, 255.527400, 1.537821, 194.309200, 0.000128, 1.000000, 1.000000, 1.000000},
    {2.612497, 501.768000, 2.000000, 2.000000, 1.000000, 176.108700, 8.631634, 301.768800, 2.460257, 1.000000, 1.000000, 1.000000, 2.000000, 20.174150, 2.198636, 852.265400, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.803200, 144.116900, 1.722872, 900.576800, 1.000000, 2.000000, 1.000000, 1.000000, 7.798513, 137.554500, 269.706500, 16.188160, 1.730197, 1.294607, 0.732580, 0.306569, 1.000000, 248.942600, 1.025214, 187.339800, 0.000000, 1.000000, 1.000000, 1.000000},
    {2.446274, 516.605500, 2.000000, 2.000000, 1.000000, 263.009500, 8.336196, 334.555200, 2.449492, 1.000000, 1.000000, 1.000000, 2.000000, 19.838020, 2.214137, 940.544100, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.808000, 179.466800, 1.701214, 932.376300, 1.000000, 2.000000, 1.000000, 1.000000, 7.854909, 173.263300, 264.932100, 10.920280, 1.708793, 1.234789, 0.743591, 0.310861, 1.000000, 256.168300, 1.601897, 194.934000, 0.000128, 1.000000, 1.000000, 1.000000},
    {2.641642, 774.299900, 2.000000, 1.000000, 1.000000, 247.789000, 8.488080, 322.763400, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.106409, 0.000000, 1012.641000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 148.803200, 152.755700, 1.721078, 834.439900, 1.000000, 2.000000, 1.000000, 1.000000, 7.811972, 145.116600, 258.779800, 12.496800, 1.731735, 1.296016, 0.734885, 0.306761, 1.000000, 249.215000, 1.025214, 187.932600, 0.000000, 1.000000, 1.000000, 1.000000},
    {2.592960, 509.814800, 2.000000, 2.000000, 1.000000, 257.209700, 8.420790, 516.662400, 2.456156, 1.000000, 1.000000, 1.000000, 1.000000, 19.882840, 2.207731, 924.482500, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 0.000000, 181.312500, 1.695960, 897.616000, 1.000000, 2.000000, 1.000000, 1.000000, 7.859715, 169.136100, 271.212500, 10.881830, 1.700718, 1.234405, 0.746279, 0.310540, 1.000000, 258.395300, 1.441707, 196.904600, 0.000128, 1.000000, 1.000000, 1.000000},
    {0.000000, 680.956800, 1.000000, 2.000000, 1.000000, 256.472700, 8.349654, 338.528600, 2.441803, 1.000000, 1.000000, 1.000000, 2.000000, 19.978870, 2.220542, 802.318400, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.803200, 185.798500, 1.699805, 839.092500, 1.000000, 2.000000, 1.000000, 1.000000, 7.833120, 173.878500, 255.319200, 10.612660, 1.709434, 1.254515, 0.739366, 0.308683, 1.000000, 254.582200, 1.041233, 193.540100, 0.000064, 1.000000, 1.000000, 1.000000},
    {0.000000, 584.238000, 1.000000, 2.000000, 1.000000, 188.477300, 8.528133, 372.955700, 2.452440, 2.000000, 1.000000, 1.000000, 2.000000, 20.119730, 2.199020, 817.058200, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.812800, 161.112500, 1.703393, 330.761400, 1.000000, 2.000000, 1.000000, 1.000000, 7.567163, 147.603200, 249.615500, 13.419640, 1.712766, 1.301780, 0.735269, 0.308426, 1.000000, 249.583400, 1.025214, 187.724300, 0.000064, 1.000000, 1.000000, 1.000000},
    {2.656055, 498.745500, 2.000000, 2.000000, 1.000000, 174.090000, 8.608883, 301.743100, 2.455772, 1.000000, 1.000000, 1.000000, 2.000000, 20.180550, 2.199020, 958.087700, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.808000, 145.065400, 1.720309, 927.339200, 1.000000, 2.000000, 1.000000, 1.000000, 7.786016, 138.733700, 265.540900, 16.188160, 1.730838, 1.271295, 0.732836, 0.306633, 1.000000, 248.814400, 0.816967, 187.179600, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 812.610600, 1.000000, 1.000000, 1.000000, 182.549300, 8.660472, 301.640600, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.987963, 0.000000, 1008.235000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 148.808000, 147.269900, 1.710826, 807.216100, 1.000000, 2.000000, 1.000000, 1.000000, 7.771597, 139.400100, 257.177600, 13.842600, 1.717124, 1.285769, 0.734885, 0.306313, 1.000000, 251.922600, 0.800948, 189.727000, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 562.923800, 1.000000, 2.000000, 1.000000, 265.444800, 8.347411, 330.017900, 2.435267, 1.000000, 1.000000, 1.000000, 2.000000, 2.202446, 0.000000, 905.777400, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 148.803200, 162.496800, 1.735687, 936.682900, 1.000000, 2.000000, 1.000000, 1.000000, 7.888875, 148.449100, 273.872100, 13.458090, 1.747501, 1.294607, 0.728867, 0.304583, 1.000000, 246.699600, 1.169384, 186.394500, 0.000000, 1.000000, 1.000000, 1.000000},
    {2.606412, 496.154800, 2.000000, 2.000000, 1.000000, 190.464000, 8.539028, 325.583200, 2.442060, 1.000000, 1.000000, 1.000000, 2.000000, 20.007680, 2.197739, 830.676500, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.808000, 148.756700, 1.715567, 600.000000, 1.000000, 2.000000, 1.000000, 1.000000, 7.761984, 142.425000, 261.535500, 14.611640, 1.726224, 1.294479, 0.730020, 0.308298, 1.000000, 247.997300, 0.816967, 186.570800, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 812.963900, 1.000000, 1.000000, 1.000000, 198.154300, 8.524929, 370.187100, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.035982, 0.000000, 1015.124000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 325.249900, 0.000000, 248.359400, 1.000000, 1.000000, 1.000000, 1.000000, 7.434184, 185.901000, 269.994900, 15.688280, 0.001025, 0.001153, 0.001152, 0.000000, 1.000000, 9.660984, 0.000000, 3.252371, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 814.102200, 1.000000, 1.000000, 1.000000, 188.669600, 8.612728, 330.658800, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.010372, 0.000000, 1015.885000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.803200, 309.612900, 0.000000, 245.936900, 1.000000, 1.000000, 1.000000, 1.000000, 7.639580, 242.937700, 266.694400, 15.188410, 0.000897, 0.001153, 0.000896, 0.000000, 1.000000, 10.285820, 0.000000, 3.941297, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 812.649800, 1.000000, 1.000000, 1.000000, 192.931300, 8.582607, 355.037200, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.010372, 0.000000, 1015.365000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 332.325000, 0.000000, 247.282700, 1.000000, 1.000000, 1.000000, 1.000000, 7.512689, 223.455500, 268.168400, 15.611380, 0.000769, 0.001153, 0.000896, 0.000000, 1.000000, 10.013460, 0.000000, 3.733017, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 812.767600, 1.000000, 1.000000, 1.000000, 192.931300, 8.593502, 349.115600, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.010372, 0.000000, 1015.645000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 330.171800, 0.000000, 247.590400, 1.000000, 1.000000, 1.000000, 1.000000, 7.541849, 236.529100, 267.687800, 15.534480, 0.000897, 0.001153, 0.000896, 0.000000, 1.000000, 10.061520, 0.000000, 3.733017, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 814.534000, 1.000000, 1.000000, 1.000000, 193.251700, 8.551846, 363.881000, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.032781, 0.000000, 1014.524000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.812800, 331.171500, 0.000000, 247.744200, 1.000000, 1.000000, 1.000000, 1.000000, 7.469110, 201.076600, 269.225800, 15.726740, 0.000897, 0.001153, 0.001024, 0.000000, 1.000000, 9.773135, 0.000000, 3.492694, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 813.434900, 1.000000, 1.000000, 1.000000, 192.867200, 8.583569, 356.062600, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.003969, 0.000000, 1014.924000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 332.350700, 0.000000, 246.936700, 1.000000, 1.000000, 1.000000, 1.000000, 7.504999, 221.020200, 268.168400, 15.688280, 0.000897, 0.001153, 0.000896, 0.000000, 1.000000, 10.013460, 0.000000, 3.733017, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 813.434900, 1.000000, 1.000000, 1.000000, 192.931300, 8.582607, 353.627300, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.010372, 0.000000, 1015.925000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 331.940500, 0.000000, 248.090200, 1.000000, 1.000000, 1.000000, 1.000000, 7.520059, 227.275100, 268.072300, 15.572930, 0.000897, 0.001153, 0.000896, 0.000000, 1.000000, 10.029480, 0.000000, 3.733017, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 813.120900, 1.000000, 1.000000, 1.000000, 195.815200, 8.535503, 367.675000, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.035982, 0.000000, 1014.964000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 328.377300, 0.000000, 246.436800, 1.000000, 1.000000, 1.000000, 1.000000, 7.448603, 191.156100, 269.706500, 15.496030, 0.001025, 0.001153, 0.001152, 0.000000, 1.000000, 9.580876, 0.000000, 3.412586, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 813.395600, 1.000000, 1.000000, 1.000000, 192.162300, 8.611446, 336.580400, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.997567, 0.000000, 1015.325000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.803200, 323.814400, 0.000000, 246.782900, 1.000000, 1.000000, 1.000000, 1.000000, 7.612984, 247.423700, 267.014900, 15.380670, 0.000897, 0.001153, 0.000896, 0.000000, 1.000000, 10.205720, 0.000000, 3.941297, 0.000000, 1.000000, 1.000000, 1.000000}
    };



    const float labels[20] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};

    float preds[20];
    float  start,endt,moyt;

    int main()
    {
       moyt=0;
       int16_t start_1=k_uptime_ticks();
       printf("sys_clock_hw_cycles_per_sec = %d\n",sys_clock_hw_cycles_per_sec());

       for (int x= 0; x != 10; x++)
       {
            moyt =0;
            for (int i=0;i<200;i++)
            {
                start= k_uptime_ticks();
                preds[i%20] = mlp_modbus_predict(features[i%20],features_length);


                endt=k_uptime_ticks();
                moyt+=(endt-start);
                printf("One prediction : %lld  , %d\n ", endt-start, i);
            }
            k_msleep(2000);
       }

            int16_t endt_1=k_uptime_ticks();
            moyt=moyt/20U;
            printf("Prediction start cycles %d\n",start_1);
            printf("All predictions end cycles %d \n",endt_1);
            printf("Prediction moyt cycles in loop %lld \n",moyt);  
            for (int i=0;i<20;i++)
            {
                if (preds[i]!=labels[i])
                	    {
                         printf("Prediction error for %d - prediction %d - label %d \n",i, preds[i], labels[i]);
                     }
                else  
                {    
                 printf("No Prediction error for %d %d\n",i, preds[i]);
                }
            }
       return 0;
    };
   



Ml Studio / Edge Impulse
--------------------------


Comme vu précédemment, on aura un fichier ``src/main.cpp``. Nous avons le code suivant pour tester notre inférence. 
On effectuera ``500 x 20`` prédictions.

.. code-block:: cpp

    // Zephyr 3.1.x and newer uses different include scheme
    #include <version.h>
    #if (KERNEL_VERSION_MAJOR > 3) || ((KERNEL_VERSION_MAJOR == 3) && (KERNEL_VERSION_MINOR >= 1))
    #include <zephyr/kernel.h>
    #else
    #include <zephyr.h>
    #endif
    #include "edge-impulse-sdk/classifier/ei_run_classifier.h"
    #include "edge-impulse-sdk/dsp/numpy.hpp"
    #define EI_NORDIC
    #ifdef EI_NORDIC
    #include <nrfx_clock.h>
    #endif

    // 20 features for testing

    static float myfeatures[20][51] = {
    //normal x10
    {2.535311, 511.4634, 2.0, 2.0, 1.0, 265.5089, 8.347411, 329.0695, 2.441803, 2.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 19.68756, 2.218749, 921.4785, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 148.8128, 158.2158, 1.738891, 889.5411, 1.0, 2.0, 1.0, 1.0, 2.0, 7.88535, 145.5012, 271.8213, 13.41964, 1.75314, 1.332266, 0.7307877, 0.3045831, 2.0, 1.0, 246.6675, 1.169384, 186.0581, 0.0, 1.0, 1.0, 1.0}, 
    {2.649329, 496.2726, 2.0, 2.0, 1.0, 266.4701, 8.347411, 336.324, 2.4559, 2.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 20.13573, 2.212984, 838.0063, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 148.8032, 172.648, 1.69737, 892.6942, 1.0, 2.0, 1.0, 1.0, 2.0, 7.874135, 164.7783, 265.7011, 11.07408, 1.706998, 1.259255, 0.7435906, 0.3104122, 2.0, 1.0, 254.8705, 1.169384, 193.7484, 0.0, 1.0, 1.0, 1.0},
    {2.505845, 797.7731, 2.0, 1.0, 1.0, 258.1389, 8.422071, 324.4553, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.288879, 0.0, 1010.078, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 148.8176, 182.9018, 1.69801, 802.4866, 1.0, 2.0, 1.0, 1.0, 2.0, 7.843694, 173.3145, 257.9787, 10.57421, 1.709049, 1.266556, 0.7438467, 0.3102841, 2.0, 1.0, 254.9186, 1.057252, 193.8926, 6.41e-05, 1.0, 1.0, 1.0},
    {2.572463, 509.9326, 2.0, 2.0, 1.0, 264.7398, 8.371443, 330.0436, 2.445904, 2.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 19.73878, 2.213881, 912.6266, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 148.8032, 161.8816, 1.722231, 882.0815, 1.0, 2.0, 1.0, 1.0, 2.0, 7.888555, 147.7314, 270.3794, 12.11228, 1.730838, 1.272576, 0.7347566, 0.3040707, 2.0, 1.0, 250.9933, 1.137347, 189.9193, 0.0, 1.0, 1.0, 1.0}, 
    {0.0, 810.4124, 1.0, 1.0, 1.0, 266.4701, 8.42111, 325.0961, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 9.763749, 2.213624, 1005.471, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 148.808, 172.1353, 1.695063, 788.8362, 1.0, 2.0, 1.0, 1.0, 2.0, 7.874455, 164.8808, 268.585, 11.18944, 1.702897, 1.254515, 0.7442307, 0.3100919, 2.0, 1.0, 254.7904, 1.441707, 193.6683, 0.0001281517, 1.0, 1.0, 1.0}, 
    {0.0, 748.3146, 1.0, 1.0, 1.0, 263.4901, 8.448347, 320.8408, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 19.73558, 2.215802, 822.2251, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 148.808, 152.9095, 1.717746, 781.4919, 1.0, 2.0, 1.0, 1.0, 2.0, 7.87766, 142.2712, 263.8105, 12.34299, 1.728916, 1.277828, 0.7353967, 0.3084265, 2.0, 1.0, 249.3431, 1.665972, 188.1569, 0.000128152, 1.0, 1.0, 1.0},
    {2.608013, 521.1589, 2.0, 2.0, 1.0, 260.4781, 8.412779, 330.4025, 2.443725, 2.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 19.89884, 2.208756, 953.2011, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 148.808, 152.8582, 1.710441, 918.1107, 1.0, 2.0, 1.0, 1.0, 2.0, 7.86324, 143.9887, 265.7011, 11.88157, 1.717893, 1.277956, 0.7379573, 0.3082983, 2.0, 1.0, 252.8839, 1.505783, 191.1048, 0.000128152, 1.0, 1.0, 1.0},
    {2.513532, 493.5249, 2.0, 2.0, 1.0, 259.8052, 8.347091, 476.0318, 2.455515, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 20.0429, 2.207091, 828.7538, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 0.0, 187.1315, 1.705315, 993.1299, 1.0, 2.0, 1.0, 1.0, 2.0, 7.842412, 173.5196, 272.8147, 11.68931, 1.71456, 1.282183, 0.7435906, 0.3084265, 2.0, 1.0, 255.0788, 1.009195, 194.165, 6.41e-05, 1.0, 1.0, 1.0},
    {0.0, 812.3751, 1.0, 1.0, 1.0, 266.8226, 8.444181, 323.4043, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 20.18695, 2.212984, 841.0504, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 148.8032, 167.4699, 1.6925, 807.0239, 1.0, 2.0, 1.0, 1.0, 2.0, 7.897206, 156.1907, 268.1364, 10.92028, 1.701743, 1.261688, 0.7432065, 0.3107325, 2.0, 1.0, 255.5595, 1.025214, 194.1489, 6.41e-05, 1.0, 1.0, 1.0},
    {2.472216, 663.2931, 2.0, 1.0, 1.0, 263.2979, 8.439695, 316.9187, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.170434, 0.0, 1013.282, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 148.8032, 156.0625, 1.723897, 901.1536, 1.0, 2.0, 1.0, 1.0, 2.0, 7.890157, 144.3989, 265.1884, 12.41989, 1.732761, 1.293326, 0.7347566, 0.3075297, 2.0, 1.0, 248.7503, 1.08929, 187.7563, 6.41e-05, 1.0, 1.0, 1.0},

    //attack x10
    {0.0, 813.7489, 1.0, 1.0, 1.0, 192.9313, 8.581646, 355.2935, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.010372, 0.0, 1014.724, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 148.808, 332.2738, 0.0, 247.5135, 1.0, 1.0, 1.0, 1.0, 1.0, 7.509485, 222.9428, 268.1684, 15.49603, 0.000897206, 0.001152812, 0.000896201, 0.0, 1.0, 1.0, 10.01346, 0.0, 3.65291, 0.0, 1.0, 1.0, 1.0}, 
    {0.0, 813.8275, 1.0, 1.0, 1.0, 192.9633, 8.605999, 338.0415, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.000768, 0.0, 1015.565, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 148.8032, 325.6345, 0.0, 248.1287, 1.0, 1.0, 1.0, 1.0, 1.0, 7.599526, 247.3212, 267.1751, 15.34222, 0.000897206, 0.001152812, 0.000768172, 0.0, 1.0, 1.0, 10.1897, 0.0, 3.797103, 0.0, 1.0, 1.0, 1.0}, 
    {0.0, 814.22, 1.0, 1.0, 1.0, 192.8993, 8.58485, 352.243, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.010372, 0.0, 1015.725, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 148.808, 331.4022, 0.0, 248.0902, 1.0, 1.0, 1.0, 1.0, 1.0, 7.526468, 229.9923, 268.0723, 15.57293, 0.000897206, 0.001152812, 0.000896201, 0.0, 1.0, 1.0, 9.981415, 0.0, 3.733017, 0.0, 1.0, 1.0, 1.0}, 
    {0.0, 812.9639, 1.0, 1.0, 1.0, 197.2892, 8.524929, 369.213, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.035982, 0.0, 1016.046, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 148.808, 326.4547, 0.0, 248.3209, 1.0, 1.0, 1.0, 1.0, 1.0, 7.443476, 187.8236, 269.8987, 15.61138, 0.001025378, 0.000896631, 0.001152258, 0.0, 1.0, 1.0, 9.628942, 0.0, 3.316457, 0.0, 1.0, 1.0, 1.0}, 
    {0.0, 814.0237, 1.0, 1.0, 1.0, 193.2517, 8.600231, 343.2453, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.000768, 0.0, 1014.844, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 148.808, 327.557, 0.0, 247.0136, 1.0, 1.0, 1.0, 1.0, 1.0, 7.575173, 244.3476, 267.3353, 15.41912, 0.000897206, 0.001152812, 0.000896201, 0.0, 1.0, 1.0, 10.06152, 0.0, 3.829146, 0.0, 1.0, 1.0, 1.0}, 
    {0.0, 551.0302, 1.0, 2.0, 2.0, 211.6124, 8.446104, 330.5819, 2.805241, 2.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 19.5243, 2.207347, 801.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 148.808, 149.3207, 1.732227, 850.7819, 1.0, 2.0, 1.0, 1.0, 2.0, 7.785696, 142.9633, 267.4635, 15.88054, 1.740836, 1.306776, 0.727843, 0.3068891, 2.0, 1.0, 244.5687, 1.585878, 184.0073, 0.000128152, 1.0, 1.0, 1.0}, 
    {2.541075, 514.4859, 2.0, 2.0, 1.0, 169.1233, 8.621059, 305.6396, 2.461282, 2.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 20.40463, 2.196842, 490.3863, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 148.8032, 144.8347, 1.710313, 934.3758, 1.0, 2.0, 1.0, 1.0, 2.0, 7.750449, 138.708, 271.1805, 16.38041, 1.716611, 1.282439, 0.7347566, 0.3106043, 2.0, 1.0, 249.0227, 0.9291, 187.2437, 0.0, 1.0, 1.0, 1.0}, 
    {0.0, 813.5919, 1.0, 1.0, 1.0, 192.9313, 8.593502, 348.9874, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.010372, 0.0, 1016.166, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 148.808, 330.0179, 0.0, 248.1287, 1.0, 1.0, 1.0, 1.0, 1.0, 7.54281, 236.8111, 267.6878, 15.53448, 0.000897206, 0.001152812, 0.000896201, 0.0, 1.0, 1.0, 10.02948, 0.0, 3.781082, 0.0, 1.0, 1.0, 1.0}, 
    {2.530506, 575.0137, 2.0, 1.0, 1.0, 188.4132, 8.638042, 307.998, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.019976, 0.0, 1009.717, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 148.808, 147.8339, 1.716464, 905.0372, 1.0, 2.0, 1.0, 1.0, 2.0, 7.7732, 141.7073, 264.7398, 14.76544, 1.721225, 1.311772, 0.7329642, 0.3082983, 2.0, 1.0, 248.4139, 0.7849293, 187.0354, 0.0, 1.0, 1.0, 1.0}, 
    {0.0, 813.4349, 1.0, 1.0, 1.0, 188.5094, 8.622021, 322.7378, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.872719, 0.0, 1015.365, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 148.8032, 259.7539, 0.0, 247.0905, 1.0, 1.0, 1.0, 1.0, 1.0, 7.680915, 219.636, 266.3099, 14.9577, 0.000769034, 0.000768541, 0.000512115, 0.0, 1.0, 1.0, 10.30185, 0.0, 3.941297, 0.0, 1.0, 1.0, 1.0}
    };

    const float labels[20] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};

    float tmp_features[51];

    int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
        memcpy(out_ptr, tmp_features + offset, length * sizeof(float));
        return 0;
    }


    /*
    int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
        memcpy(out_ptr, features + offset, length * sizeof(float));
        return 0;
    }
    */


    int main() {
        float  start,endt;
        // This is needed so that output of printf is output immediately without buffering
        setvbuf(stdout, NULL, _IONBF, 0);

    #ifdef CONFIG_SOC_NRF5340_CPUAPP // this comes from Zephyr
        // Switch CPU core clock to 128 MHz
        nrfx_clock_divider_set(NRF_CLOCK_DOMAIN_HFCLK, NRF_CLOCK_HFCLK_DIV_1);
    #endif

        printk("Hello -Edge Impulse standalone inferencing (Zephyr)\n");

        if (sizeof(myfeatures[0]) / sizeof(float) != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
            printk("The size of your 'features' array is not correct. Expected %d items, but had %u\n",
                EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, sizeof(myfeatures[0]) / sizeof(float));
            return 1;
        }

        ei_impulse_result_t result = {0};

        while (1) {

            // the features are stored into flash, and we don't want to load everything into RAM
            signal_t features_signal;
            EI_IMPULSE_ERROR res ;

            // for consumption , 10000 predictions

            for (int x = 0; x < 500; x++)
            {

                // signal for 20 features
                for (int i =0 ; i<20; i++)
                {
                    start= k_uptime_ticks();
                    //Changer de features
                    for (int x = 0; x < 46; x++) 
                    {
                        tmp_features[x] = myfeatures[i][x];
                    }

                    printk("features %d\n",i);
                    features_signal.total_length = 46; // features size
                    features_signal.get_data = &raw_feature_get_data;


                    // invoke the impulse
                    res = run_classifier(&features_signal, &result, false);
                    //printk("run_classifier returned: %d\n", res);

                    //printk("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
                    //    result.timing.dsp, result.timing.classification, result.timing.anomaly);

                        #if EI_CLASSIFIER_OBJECT_DETECTION == 1
                        bool bb_found = result.bounding_boxes[0].value > 0;
                        for (size_t ix = 0; ix < result.bounding_boxes_count; ix++) {
                            auto bb = result.bounding_boxes[ix];
                            if (bb.value == 0) {
                                continue;
                            }

                            printk("    %s (%f) [ x: %u, y: %u, width: %u, height: %u ]\n", bb.label, bb.value, bb.x, bb.y, bb.width, bb.height);
                        }
                        if (!bb_found) {
                            printk("    No objects found\n");
                        }
                    #else
                        printk("Prediction here\n");
                        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
                            printk("    %s: %.5f\n", result.classification[ix].label,
                                                    result.classification[ix].value);
                        }
                    #if EI_CLASSIFIER_HAS_ANOMALY == 1
                        printk("    anomaly score: %.3f\n", result.anomaly);
                    #endif
                    #endif

                    printk("expected prediction: %f vs  prediction \n", labels[i]);
                    endt=k_uptime_ticks();
                    printk("Time for one prediction : %lld ticks\n", endt-start);
                        //k_msleep(2000);

                }

            } // end of for 500

            k_msleep(2000);
            printk("retry\n");

        }
    }
