// Zephyr 3.1.x and newer uses different include scheme
#include <version.h>
#if (KERNEL_VERSION_MAJOR > 3) || ((KERNEL_VERSION_MAJOR == 3) && (KERNEL_VERSION_MINOR >= 1))
#include <zephyr/kernel.h>
#else
#include <zephyr.h>
#endif
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"
#include "edge-impulse-sdk/dsp/numpy.hpp"
#define EI_NORDIC
#ifdef EI_NORDIC
#include <nrfx_clock.h>

#endif


//anomaly : 0.0000, 813.7882, 1.0000, 1.0000, 1.0000, 188.5094, 8.6284, 315.5601, 0.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.8855, 0.0000, 1011.4790, 1.0000, 1.0000, 1.0000, 2.0000, 1.0000, 1.0000, 148.8080, 144.9628, 1.7081, 403.2428, 1.0000, 2.0000, 1.0000, 1.0000, 2.0000, 7.7428, 138.9644, 264.7398, 14.9962, 1.7157, 1.2823, 0.7345, 0.3083, 2.0000, 1.0000, 247.2924, 0.8490, 186.0100, 0.0000, 1.0000, 1.0000, 1.0000
/* static const float features[] = {
   // copy raw features here (for example from the 'Live classification' page)
    // see https://docs.edgeimpulse.com/docs/running-your-impulse-locally-zephyr
   0.0000, 541.7665, 1.0000, 2.0000, 1.0000, 173.2889, 8.6403, 298.8977, 2.4555, 2.0000, 2.0000, 1.0000, 2.0000, 1.0000, 2.0000, 1.0000, 1.9143, 0.0000, 866.0840, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 148.8080, 144.1682, 1.7244, 970.3666, 1.0000, 2.0000, 1.0000, 1.0000, 2.0000, 7.7911, 138.0928, 255.4153, 15.0346, 1.7370, 1.3023, 0.7285, 0.3044, 2.0000, 1.0000, 249.1188, 0.8490, 187.0995, 0.0000, 1.0000, 1.0000, 1.0000
}; */

/*
 static const float features[]= {
   // copy raw features here (for example from the 'Live classification' page)
    // see https://docs.edgeimpulse.com/docs/running-your-impulse-locally-zephyr
0.0000, 813.7882, 1.0000, 1.0000, 1.0000, 188.5094, 8.6284, 315.5601, 0.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.8855, 0.0000, 1011.4790, 1.0000, 1.0000, 1.0000, 2.0000, 1.0000, 1.0000, 148.8080, 144.9628, 1.7081, 403.2428, 1.0000, 2.0000, 1.0000, 1.0000, 2.0000, 7.7428, 138.9644, 264.7398, 14.9962, 1.7157, 1.2823, 0.7345, 0.3083, 2.0000, 1.0000, 247.2924, 0.8490, 186.0100, 0.0000, 1.0000, 1.0000, 1.0000

}; 
*/

// 20 features for testing

static float myfeatures[20][46] = {
    {2.426416, 500.511900, 2.000000, 2.000000, 1.000000, 260.766500, 8.329146, 336.580400, 2.445904, 1.000000, 1.000000, 1.000000, 2.000000, 19.822010, 2.212856, 847.619200, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.808000, 179.441200, 1.697626, 911.958500, 1.000000, 2.000000, 1.000000, 1.000000, 7.854909, 173.468300, 260.542200, 10.766470, 1.703538, 1.257974, 0.743335, 0.310604, 1.000000, 255.527400, 1.537821, 194.309200, 0.000128, 1.000000, 1.000000, 1.000000},
    {2.612497, 501.768000, 2.000000, 2.000000, 1.000000, 176.108700, 8.631634, 301.768800, 2.460257, 1.000000, 1.000000, 1.000000, 2.000000, 20.174150, 2.198636, 852.265400, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.803200, 144.116900, 1.722872, 900.576800, 1.000000, 2.000000, 1.000000, 1.000000, 7.798513, 137.554500, 269.706500, 16.188160, 1.730197, 1.294607, 0.732580, 0.306569, 1.000000, 248.942600, 1.025214, 187.339800, 0.000000, 1.000000, 1.000000, 1.000000},
    {2.446274, 516.605500, 2.000000, 2.000000, 1.000000, 263.009500, 8.336196, 334.555200, 2.449492, 1.000000, 1.000000, 1.000000, 2.000000, 19.838020, 2.214137, 940.544100, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.808000, 179.466800, 1.701214, 932.376300, 1.000000, 2.000000, 1.000000, 1.000000, 7.854909, 173.263300, 264.932100, 10.920280, 1.708793, 1.234789, 0.743591, 0.310861, 1.000000, 256.168300, 1.601897, 194.934000, 0.000128, 1.000000, 1.000000, 1.000000},
    {2.641642, 774.299900, 2.000000, 1.000000, 1.000000, 247.789000, 8.488080, 322.763400, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.106409, 0.000000, 1012.641000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 148.803200, 152.755700, 1.721078, 834.439900, 1.000000, 2.000000, 1.000000, 1.000000, 7.811972, 145.116600, 258.779800, 12.496800, 1.731735, 1.296016, 0.734885, 0.306761, 1.000000, 249.215000, 1.025214, 187.932600, 0.000000, 1.000000, 1.000000, 1.000000},
    {2.592960, 509.814800, 2.000000, 2.000000, 1.000000, 257.209700, 8.420790, 516.662400, 2.456156, 1.000000, 1.000000, 1.000000, 1.000000, 19.882840, 2.207731, 924.482500, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 0.000000, 181.312500, 1.695960, 897.616000, 1.000000, 2.000000, 1.000000, 1.000000, 7.859715, 169.136100, 271.212500, 10.881830, 1.700718, 1.234405, 0.746279, 0.310540, 1.000000, 258.395300, 1.441707, 196.904600, 0.000128, 1.000000, 1.000000, 1.000000},
    {0.000000, 680.956800, 1.000000, 2.000000, 1.000000, 256.472700, 8.349654, 338.528600, 2.441803, 1.000000, 1.000000, 1.000000, 2.000000, 19.978870, 2.220542, 802.318400, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.803200, 185.798500, 1.699805, 839.092500, 1.000000, 2.000000, 1.000000, 1.000000, 7.833120, 173.878500, 255.319200, 10.612660, 1.709434, 1.254515, 0.739366, 0.308683, 1.000000, 254.582200, 1.041233, 193.540100, 0.000064, 1.000000, 1.000000, 1.000000},
    {0.000000, 584.238000, 1.000000, 2.000000, 1.000000, 188.477300, 8.528133, 372.955700, 2.452440, 2.000000, 1.000000, 1.000000, 2.000000, 20.119730, 2.199020, 817.058200, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.812800, 161.112500, 1.703393, 330.761400, 1.000000, 2.000000, 1.000000, 1.000000, 7.567163, 147.603200, 249.615500, 13.419640, 1.712766, 1.301780, 0.735269, 0.308426, 1.000000, 249.583400, 1.025214, 187.724300, 0.000064, 1.000000, 1.000000, 1.000000},
    {2.656055, 498.745500, 2.000000, 2.000000, 1.000000, 174.090000, 8.608883, 301.743100, 2.455772, 1.000000, 1.000000, 1.000000, 2.000000, 20.180550, 2.199020, 958.087700, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.808000, 145.065400, 1.720309, 927.339200, 1.000000, 2.000000, 1.000000, 1.000000, 7.786016, 138.733700, 265.540900, 16.188160, 1.730838, 1.271295, 0.732836, 0.306633, 1.000000, 248.814400, 0.816967, 187.179600, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 812.610600, 1.000000, 1.000000, 1.000000, 182.549300, 8.660472, 301.640600, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.987963, 0.000000, 1008.235000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 148.808000, 147.269900, 1.710826, 807.216100, 1.000000, 2.000000, 1.000000, 1.000000, 7.771597, 139.400100, 257.177600, 13.842600, 1.717124, 1.285769, 0.734885, 0.306313, 1.000000, 251.922600, 0.800948, 189.727000, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 562.923800, 1.000000, 2.000000, 1.000000, 265.444800, 8.347411, 330.017900, 2.435267, 1.000000, 1.000000, 1.000000, 2.000000, 2.202446, 0.000000, 905.777400, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 148.803200, 162.496800, 1.735687, 936.682900, 1.000000, 2.000000, 1.000000, 1.000000, 7.888875, 148.449100, 273.872100, 13.458090, 1.747501, 1.294607, 0.728867, 0.304583, 1.000000, 246.699600, 1.169384, 186.394500, 0.000000, 1.000000, 1.000000, 1.000000},
    {2.606412, 496.154800, 2.000000, 2.000000, 1.000000, 190.464000, 8.539028, 325.583200, 2.442060, 1.000000, 1.000000, 1.000000, 2.000000, 20.007680, 2.197739, 830.676500, 1.000000, 2.000000, 1.000000, 1.000000, 1.000000, 2.000000, 148.808000, 148.756700, 1.715567, 600.000000, 1.000000, 2.000000, 1.000000, 1.000000, 7.761984, 142.425000, 261.535500, 14.611640, 1.726224, 1.294479, 0.730020, 0.308298, 1.000000, 247.997300, 0.816967, 186.570800, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 812.963900, 1.000000, 1.000000, 1.000000, 198.154300, 8.524929, 370.187100, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.035982, 0.000000, 1015.124000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 325.249900, 0.000000, 248.359400, 1.000000, 1.000000, 1.000000, 1.000000, 7.434184, 185.901000, 269.994900, 15.688280, 0.001025, 0.001153, 0.001152, 0.000000, 1.000000, 9.660984, 0.000000, 3.252371, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 814.102200, 1.000000, 1.000000, 1.000000, 188.669600, 8.612728, 330.658800, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.010372, 0.000000, 1015.885000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.803200, 309.612900, 0.000000, 245.936900, 1.000000, 1.000000, 1.000000, 1.000000, 7.639580, 242.937700, 266.694400, 15.188410, 0.000897, 0.001153, 0.000896, 0.000000, 1.000000, 10.285820, 0.000000, 3.941297, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 812.649800, 1.000000, 1.000000, 1.000000, 192.931300, 8.582607, 355.037200, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.010372, 0.000000, 1015.365000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 332.325000, 0.000000, 247.282700, 1.000000, 1.000000, 1.000000, 1.000000, 7.512689, 223.455500, 268.168400, 15.611380, 0.000769, 0.001153, 0.000896, 0.000000, 1.000000, 10.013460, 0.000000, 3.733017, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 812.767600, 1.000000, 1.000000, 1.000000, 192.931300, 8.593502, 349.115600, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.010372, 0.000000, 1015.645000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 330.171800, 0.000000, 247.590400, 1.000000, 1.000000, 1.000000, 1.000000, 7.541849, 236.529100, 267.687800, 15.534480, 0.000897, 0.001153, 0.000896, 0.000000, 1.000000, 10.061520, 0.000000, 3.733017, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 814.534000, 1.000000, 1.000000, 1.000000, 193.251700, 8.551846, 363.881000, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.032781, 0.000000, 1014.524000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.812800, 331.171500, 0.000000, 247.744200, 1.000000, 1.000000, 1.000000, 1.000000, 7.469110, 201.076600, 269.225800, 15.726740, 0.000897, 0.001153, 0.001024, 0.000000, 1.000000, 9.773135, 0.000000, 3.492694, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 813.434900, 1.000000, 1.000000, 1.000000, 192.867200, 8.583569, 356.062600, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.003969, 0.000000, 1014.924000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 332.350700, 0.000000, 246.936700, 1.000000, 1.000000, 1.000000, 1.000000, 7.504999, 221.020200, 268.168400, 15.688280, 0.000897, 0.001153, 0.000896, 0.000000, 1.000000, 10.013460, 0.000000, 3.733017, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 813.434900, 1.000000, 1.000000, 1.000000, 192.931300, 8.582607, 353.627300, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.010372, 0.000000, 1015.925000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 331.940500, 0.000000, 248.090200, 1.000000, 1.000000, 1.000000, 1.000000, 7.520059, 227.275100, 268.072300, 15.572930, 0.000897, 0.001153, 0.000896, 0.000000, 1.000000, 10.029480, 0.000000, 3.733017, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 813.120900, 1.000000, 1.000000, 1.000000, 195.815200, 8.535503, 367.675000, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.035982, 0.000000, 1014.964000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.808000, 328.377300, 0.000000, 246.436800, 1.000000, 1.000000, 1.000000, 1.000000, 7.448603, 191.156100, 269.706500, 15.496030, 0.001025, 0.001153, 0.001152, 0.000000, 1.000000, 9.580876, 0.000000, 3.412586, 0.000000, 1.000000, 1.000000, 1.000000},
    {0.000000, 813.395600, 1.000000, 1.000000, 1.000000, 192.162300, 8.611446, 336.580400, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.997567, 0.000000, 1015.325000, 1.000000, 1.000000, 1.000000, 2.000000, 1.000000, 1.000000, 148.803200, 323.814400, 0.000000, 246.782900, 1.000000, 1.000000, 1.000000, 1.000000, 7.612984, 247.423700, 267.014900, 15.380670, 0.000897, 0.001153, 0.000896, 0.000000, 1.000000, 10.205720, 0.000000, 3.941297, 0.000000, 1.000000, 1.000000, 1.000000}
    };

const float labels[20] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
float tmp_features[46];
int index; // index for features

int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, tmp_features + offset, length * sizeof(float));
    return 0;
}


/*
int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features + offset, length * sizeof(float));
    return 0;
}
*/


int main() {

    float  start,endt;

    // This is needed so that output of printf is output immediately without buffering
    setvbuf(stdout, NULL, _IONBF, 0);

#ifdef CONFIG_SOC_NRF5340_CPUAPP // this comes from Zephyr
    // Switch CPU core clock to 128 MHz
    nrfx_clock_divider_set(NRF_CLOCK_DOMAIN_HFCLK, NRF_CLOCK_HFCLK_DIV_1);
#endif

    printk("Edge Impulse standalone inferencing (Zephyr)\n");

    uint32_t ticks_per_second = sys_clock_hw_cycles_per_sec();
    printk("Ticks per seconde: %u\n", ticks_per_second);


    if (sizeof(myfeatures[0]) / sizeof(float) != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
        printk("The size of your 'features' array is not correct. Expected %d items, but had %u\n",
            EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, sizeof(myfeatures[0]) / sizeof(float));
        return 1;
    }

    ei_impulse_result_t result = {0};

    while (1) {
        
        // the features are stored into flash, and we don't want to load everything into RAM
        signal_t features_signal;
        EI_IMPULSE_ERROR res ;

        // signal for 20 features
        for (int i =0 ; i<20; i++){
            start= k_uptime_ticks();   //start time


            // changer de features
            for (int x = 0; x < 46; x++) {
                tmp_features[x] = myfeatures[i][x];
            }

            printk("features %d\n",i);
            features_signal.total_length = 46; // features size
            features_signal.get_data = &raw_feature_get_data;


            // invoke the impulse
            res = run_classifier(&features_signal, &result, false);

            endt= k_uptime_ticks(); //end time

            printk("run_classifier returned: %d\n", res);

            printk("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
                result.timing.dsp, result.timing.classification, result.timing.anomaly);

            
            #if EI_CLASSIFIER_OBJECT_DETECTION == 1
                bool bb_found = result.bounding_boxes[0].value > 0;
                for (size_t ix = 0; ix < result.bounding_boxes_count; ix++) {
                    auto bb = result.bounding_boxes[ix];
                    if (bb.value == 0) {
                        continue;
                    }
                    printk("    %s (%f) [ x: %u, y: %u, width: %u, height: %u ]\n", bb.label, bb.value, bb.x, bb.y, bb.width, bb.height);
                }
                if (!bb_found) {
                    printk("    No objects found\n");
                }
            #else
                for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
                    printk("    %s: %.5f\n", result.classification[ix].label,
                                            result.classification[ix].value);
                }
            #if EI_CLASSIFIER_HAS_ANOMALY == 1
                printk("    anomaly score: %.3f\n", result.anomaly);
            #endif
            #endif

            
            
            printk("Time for one prediction : %lld us\n", k_ticks_to_us_floor64((endt-start)));
            k_msleep(2000);
            }
        }



}

        


